
**1. Variable Assignment (:=):**
```bash
variable_name="value"   # Assign a value to a variable

2. Default Value Assignment (:-):

bash

default_variable=${variable_name:-default_value}

    If variable_name is set, it will be used.
    If variable_name is not set or is empty, default_value will be used.

3. Default Value Assignment and Set (:=):

bash

default_variable=${variable_name:=default_value}

    If variable_name is set, it will be used.
    If variable_name is not set or is empty, default_value will be used, and variable_name will be set to default_value.

4. Use Default if Unset or Null (:+):

bash

result=${variable_name:+default_value}

    If variable_name is set and not null, default_value will be used.
    If variable_name is unset or null, nothing is assigned to result.

5. Check if Variable is Set (:?):

bash

if [ -z "$variable_name" ]; then
    echo "Variable is not set."
else
    echo "Variable is set."
fi

    -z checks if the length of the string is zero (empty).

6. Use Default if Unset or Null (:-):

bash

result=${variable_name:-default_value}

    If variable_name is unset or null, default_value will be used.
    If variable_name is set and not null, its value will be used.

7. Conditional Ternary Operator (?:) - Alternative:

bash

result=$([ "$condition" = "true" ] && echo "true_value" || echo "false_value")

    Depending on the condition, it assigns one of two values to the result variable.

8. Conditional Ternary Operator (?:) - Alternative using if:

bash

if [ "$condition" = "true" ]; then
    result="true_value"
else
    result="false_value"
fi

    A more readable way to achieve conditional assignment.

These are some common uses of colons and similar symbols in Bash scripting. They allow you to handle variable assignments and conditional checks more efficiently.
